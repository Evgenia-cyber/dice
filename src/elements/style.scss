/* ***** variables ***** */
:root {
  --dice-size: 80px;
}

$color: rgba(0, 0, 0, 0.8);
$bgColor: #ffffff;
$shadow: rgba(90, 90, 90, 0.6);

$faceBorderRadius: 5px;

$containerSize: calc(var(--dice-size) * 2);

$faceTranslate: calc(var(--dice-size) / 2);
$facePadding: calc(var(--dice-size) * 0.1); // 10%
$faceBorder: calc(var(--dice-size) * 0.05); // 5%
$shadowSize: calc(var(--dice-size) * 0.03); // 3%
$facePointMargin: calc(var(--dice-size) * 0.03); // 3%
$facePointSize: calc(
  (var(--dice-size) - 2 * $facePadding - 2 * $faceBorder) / 3 - 2 *
    $facePointMargin
);

$planeTranslate: $faceTranslate;

/* ***** functions ***** */

@function neg($val) {
  @return calc(#{$val} * -1);
}

/* ***** styles ***** */

.container {
  width: $containerSize;
  height: $containerSize;
  perspective: 700px;
  perspective-origin: center center;
  background: transparent;
  overflow: hidden;
  display: flex;
  justify-content: center;
  align-items: center;
}

.dice,
.face {
  width: var(--dice-size);
  height: var(--dice-size);
  border-radius: $faceBorderRadius;
}

.dice {
  position: relative;
  transform-style: preserve-3d;
  animation: none;
}

.dice__anim {
  animation: rotate 2s;
  animation-timing-function: cubic-bezier(0, 0.28, 0.5, 1.04);
}

.dice__color {
  background-color: $bgColor;
}

/* ***** dice face ***** */
.face {
  position: absolute;
  box-sizing: border-box;
  list-style: none;
  padding: $facePadding;
  margin: 0;
  box-shadow: inset 0 $shadowSize $shadow, inset 0 neg($shadowSize) $shadow,
    inset $shadowSize 0 $shadow, inset neg($shadowSize) 0 $shadow;

  display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(3, 1fr);
  justify-items: center;
  align-items: center;
}

.face__first {
  grid-template-areas:
    ". . ."
    ". a ."
    ". . .";
}

.face__second {
  grid-template-areas:
    "a . ."
    ". . ."
    ". . b";
}

.face__third {
  grid-template-areas:
    "a . ."
    ". c ."
    ". . b";
}

.face__fourth {
  grid-template-areas:
    "a . d"
    ". . ."
    "c . b";
}

.face__fifth {
  grid-template-areas:
    "a . d"
    ". e ."
    "c . b";
}

.face__sixth {
  grid-template-areas:
    "a . d"
    "e . f"
    "c . b";
}

/* ***** dice face position ***** */

.face__front {
  transform: translateZ($faceTranslate);
}

.face__back {
  transform: translateZ(neg($faceTranslate));
  // transform: translateZ(neg($faceTranslate)) rotateY(180deg);
}

.face__left {
  transform: translateX(neg($faceTranslate)) rotateY(-90deg);
}

.face__right {
  transform: translateX($faceTranslate) rotateY(90deg);
}

.face__top {
  transform: translateY(neg($faceTranslate)) rotateX(90deg);
}

.face__bottom {
  transform: translateY($faceTranslate) rotateX(-90deg);
}

/* ***** dice point ***** */

.face__point {
  width: $facePointSize;
  height: $facePointSize;
  border-radius: 50%;
}

.point__color {
  background-color: $color;
}

.point__first {
  grid-area: a;
}

.point__second {
  grid-area: b;
}

.point__third {
  grid-area: c;
}

.point__fourth {
  grid-area: d;
}

.point__fifth {
  grid-area: e;
}

.point__sixth {
  grid-area: f;
}

/* ***** cube sides ***** */
.side {
  width: var(--dice-size);
  height: var(--dice-size);
  position: absolute;
  display: flex;
  justify-content: center;
  align-items: center;
  border: 2px solid rgb(0, 0, 0);
  background-color: #f2f3f1;
  box-sizing: border-box;
}

/* ***** animation ***** */

@keyframes rotate {
  0% {
    transform: rotateX(0deg) rotateY(0deg) rotateZ(-90deg);
  }
  100% {
    transform: rotateY(-360deg) rotateZ(720deg) rotateX(360deg);
  }
}
